{"ast":null,"code":"var _jsxFileName = \"/Users/vlad/Desktop/weather/src/WeatherDisplay.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport UpdateIcon from '@material-ui/icons/Update';\nexport default class WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null,\n      updateTime: null,\n      check: '1'\n    };\n    this.updateWeather = this.updateWeather.bind(this);\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  getWeather() {\n    const name = this.props.name;\n    const apiKey = '7d7de66dd8d5ba712b4daa70787e46e2';\n    const URL = \"https://api.openweathermap.org/data/2.5/weather?q=\" + name + \"&lang=ru&units=metric&appid=\" + apiKey;\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({\n        weatherData: json\n      });\n    });\n    this.state.updateTime = new Date();\n  }\n\n  render() {\n    const weatherData = this.state.weatherData;\n    if (!weatherData) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u0434\\u043E\\u0436\\u0434\\u0438\\u0442\\u0435, \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043E \\u043F\\u043E\\u0433\\u043E\\u0434\\u0435 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u044E\\u0442\\u0441\\u044F\");\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, weatherData.name), React.createElement(\"img\", {\n      src: iconUrl,\n      alt: weatherData.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, weather.main), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, weatherData.main.temp, \" \\xB0\\u0421\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"min: \", weatherData.main.temp_max, \" \\xB0\\u0421\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"max: \", weatherData.main.temp_min, \" \\xB0\\u0421\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"wind: \", weatherData.wind.speed, \" \\u043C/\\u0441\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"large\",\n      startIcon: React.createElement(UpdateIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }),\n      onClick: this.updateWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"\\u0412\\u0440\\u0435\\u043C\\u044F \\u043F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F: \", this.state.updateTime.toLocaleTimeString(), \" \", this.state.check));\n  }\n\n}","map":{"version":3,"sources":["/Users/vlad/Desktop/weather/src/WeatherDisplay.js"],"names":["React","Component","Button","UpdateIcon","WeatherDisplay","constructor","state","weatherData","updateTime","check","updateWeather","bind","componentDidMount","getWeather","name","props","apiKey","URL","fetch","then","res","json","setState","Date","render","weather","iconUrl","icon","description","main","temp","temp_max","temp_min","wind","speed","toLocaleTimeString"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAEA,eAAe,MAAMC,cAAN,SAA6BH,SAA7B,CAAuC;AACpDI,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,IADF;AAEXC,MAAAA,UAAU,EAAE,IAFD;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAEDA,EAAAA,UAAU,GAAG;AACX,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAxB;AACA,UAAME,MAAM,GAAG,kCAAf;AACA,UAAMC,GAAG,GAAG,uDACVH,IADU,GAEV,8BAFU,GAEuBE,MAFnC;AAGAE,IAAAA,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvB,EAAmCF,IAAnC,CAAwCE,IAAI,IAAI;AAC9C,WAAKC,QAAL,CAAc;AAAEf,QAAAA,WAAW,EAAEc;AAAf,OAAd;AACD,KAFD;AAGA,SAAKf,KAAL,CAAWE,UAAX,GAAwB,IAAIe,IAAJ,EAAxB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMjB,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA/B;AAEA,QAAI,CAACA,WAAL,EACA,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qNAAR;AAEA,UAAMkB,OAAO,GAAGlB,WAAW,CAACkB,OAAZ,CAAoB,CAApB,CAAhB;AACA,UAAMC,OAAO,GAAG,qCAAqCD,OAAO,CAACE,IAA7C,GAAoD,MAApE;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKpB,WAAW,CAACO,IAAjB,CADF,EAEU;AAAK,MAAA,GAAG,EAAEY,OAAV;AAAmB,MAAA,GAAG,EAAEnB,WAAW,CAACqB,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFV,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,OAAO,CAACI,IAAb,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKtB,WAAW,CAACsB,IAAZ,CAAiBC,IAAtB,gBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAUvB,WAAW,CAACsB,IAAZ,CAAiBE,QAA3B,gBALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAUxB,WAAW,CAACsB,IAAZ,CAAiBG,QAA3B,gBANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAWzB,WAAW,CAAC0B,IAAZ,CAAiBC,KAA5B,mBAPF,EAQE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,SAAS,EAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJb;AAKE,MAAA,OAAO,EAAE,KAAKxB,aALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DARF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qKAAiC,KAAKJ,KAAL,CAAWE,UAAX,CAAsB2B,kBAAtB,EAAjC,OAA8E,KAAK7B,KAAL,CAAWG,KAAzF,CAhBF,CADF;AAoBD;;AAxDmD","sourcesContent":["import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport UpdateIcon from '@material-ui/icons/Update';\n\nexport default class WeatherDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null,\n      updateTime: null,\n      check: '1'\n    };\n    this.updateWeather = this.updateWeather.bind(this);\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  getWeather() {\n    const name = this.props.name;\n    const apiKey = '7d7de66dd8d5ba712b4daa70787e46e2'\n    const URL = \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n      name +\n      \"&lang=ru&units=metric&appid=\" + apiKey;\n    fetch(URL).then(res => res.json()).then(json => {\n      this.setState({ weatherData: json });\n    });\n    this.state.updateTime = new Date();\n  }\n\n  render() {\n    const weatherData = this.state.weatherData;\n\n    if (!weatherData)\n    return (<div>Подождите, данные о погоде загружаются</div>);\n\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n\n    return (\n      <div>\n        <h1>{weatherData.name}</h1>\n                <img src={iconUrl} alt={weatherData.description} />\n        <h1>{weather.main}</h1>\n        <h1>{weatherData.main.temp} °С</h1>\n        <h2>min: {weatherData.main.temp_max} °С</h2>\n        <h2>max: {weatherData.main.temp_min} °С</h2>\n        <h2>wind: {weatherData.wind.speed} м/с</h2>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          startIcon={<UpdateIcon />}\n          onClick={this.updateWeather}\n          >Обновить\n        </Button>\n        <p>Время последнего обновления: {this.state.updateTime.toLocaleTimeString()} {this.state.check}</p>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}